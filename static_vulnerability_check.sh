#!/bin/bash

# Function to list Docker images
list_docker_images() {
    echo $'\n'"Available Docker images:"$'\n'
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedSince}}"
    echo
}

# Function to list Docker containers
list_docker_containers() {
    echo $'\n'"Available Docker containers:"$'\n'
    docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"
    echo
}

# Function to prompt user for image selection and validate input
select_docker_image() {
    while true; do
        echo $'\n'"Please enter the repository and tag of the Docker image you want to scan (e.g., 'myimage:latest'):"$'\n'
        read image

        # Check if the Docker image exists
        if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "^${image}$"; then
            break
        else
            echo $'\n' "Error: Docker image '$image' not found. Please try again."$'\n'
        fi
    done
}

# Function to prompt user for container selection and validate input
select_docker_container() {
    while true; do
        echo $'\n'"Please enter the ID or name of the Docker container you want to scan:"$'\n'
        read container

        # Check if the Docker container exists
        if docker ps --format "{{.ID}}" | grep -q "^${container}$" || docker ps --format "{{.Names}}" | grep -q "^${container}$"; then
            break
        else
            echo $'\n' "Error: Docker container '$container' not found. Please try again."$'\n'
        fi
    done
}

# Function to scan the selected Docker image with Trivy and count severities
scan_docker_image() {
    echo  $'\n'"Scanning Docker image: $image"$'\n'
    `rm -f /root/script/scan_results/scan_result.json`
    trivy image --format json -o /root/script/scan_results/scan_result.json $image

    # Check if scan result contains vulnerabilities
    if ! jq -e '.Results[].Vulnerabilities[]?' /root/script/scan_results/scan_result.json > /dev/null; then
        echo $'\n'"No vulnerabilities found in the Docker image: $image"$'\n'
        exit 0
    fi

    # Extract counts of severities
    critical=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' /root/script/scan_results/scan_result.json)
    high=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' /root/script/scan_results/scan_result.json)
    medium=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' /root/script/scan_results/scan_result.json)
    low=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' /root/script/scan_results/scan_result.json)
    unknown=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="UNKNOWN")] | length' /root/script/scan_results/scan_result.json)

    echo $'\n'"Vulnerability counts by severity:"$'\n'
    echo "CRITICAL: $critical"
    echo "HIGH: $high"
    echo "MEDIUM: $medium"
    echo "LOW: $low"
    echo "UNKNOWN: $unknown"
    echo
}

# Function to scan the selected Docker container with Trivy and count severities
scan_docker_container() {
    echo $'\n'"Scanning Docker container: $container"$'\n'
    rm -f /root/script/scan_results/scan_result.json
    rm -rf /root/script/container_fs/docker_container
    docker cp $container:/ /root/script/container_fs/docker_container
    trivy fs --format json -o /root/script/scan_results/scan_result.json /root/script/container_fs/docker_container

    # Check if scan result contains vulnerabilities
    if ! jq -e '.Results[].Vulnerabilities[]?' /root/script/scan_results/scan_result.json > /dev/null; then
        echo $'\n'"No vulnerabilities found in the Docker container: $container"$'\n'
        exit 0
    fi

    # Extract counts of severities
    critical=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' /root/script/scan_results/scan_result.json)
    high=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' /root/script/scan_results/scan_result.json)
    medium=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' /root/script/scan_results/scan_result.json)
    low=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' /root/script/scan_results/scan_result.json)
    unknown=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="UNKNOWN")] | length' /root/script/scan_results/scan_result.json)

    echo $'\n'"Vulnerability counts by severity:"$'\n'
    echo "CRITICAL: $critical"
    echo "HIGH: $high"
    echo "MEDIUM: $medium"
    echo "LOW: $low"
    echo "UNKNOWN: $unknown"
    echo
}

# Function to display vulnerabilities of a selected severity
display_vulnerabilities_by_severity() {
    echo $'\n'"Please enter the severity of vulnerabilities you want to see (CRITICAL, HIGH, MEDIUM, LOW, UNKNOWN):"$'\n'
    read severity

    # Display vulnerabilities of the selected severity
    echo $'\n'"Vulnerabilities of severity $severity:"$'\n' 
    vulnerabilities=$(jq --arg severity "$severity" -r '.Results[].Vulnerabilities[]? | select(.Severity==$severity) | [.VulnerabilityID, .Title, .PrimaryURL] | @tsv' /root/script/scan_results/scan_result.json)

    if [ -z "$vulnerabilities" ]; then
        echo "No vulnerabilities found for severity $severity"$''\n
        exit 0
    else
	# Loop through each vulnerability and display details
        echo "$vulnerabilities" | while IFS=$'\t' read -r id title url; do
            echo "VULNERABILITY: $id"
            echo "TITLE: $title"
            echo "MITIGATIONS: Follow this URL for potential mitigations -> $url"
            echo $'\n'
        done
    fi 
}


# Main script execution
echo $'\n'"Do you want to scan Docker images or Docker containers? (Enter 'images' or 'containers')"$'\n'
read scan_type

if [ "$scan_type" = "images" ]; then
    list_docker_images
    select_docker_image
    scan_docker_image
elif [ "$scan_type" = "containers" ]; then
    list_docker_containers
    select_docker_container
    scan_docker_container
else
    echo "Invalid input. Please enter 'images' or 'containers'."
    exit 1
fi

display_vulnerabilities_by_severity

# Main script execution
#list_docker_images
#select_docker_image
#scan_docker_image
#display_vulnerabilities_by_severity

